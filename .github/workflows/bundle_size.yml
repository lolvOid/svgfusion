name: Bundle Size Report

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  bundle-size:
    name: Bundle Size Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Calculate bundle sizes
        run: |
          echo "ðŸ“¦ SVGFusion Bundle Size Report" > bundle-size.txt
          echo "================================" >> bundle-size.txt
          echo "" >> bundle-size.txt

          # Define packages to analyze (excluding demo and docs)
          packages=(
            "svgfusion-core"
            "svgfusion-react" 
            "svgfusion-vue"
            "svgfusion-cli"
            "svgfusion-utils"
            "svgfusion-bundle"
            "svgfusion-browser"
          )

          # Function to format bytes
          format_bytes() {
            local bytes=$1
            if [ $bytes -lt 1024 ]; then
              echo "${bytes}B"
            elif [ $bytes -lt 1048576 ]; then
              echo "$(($bytes / 1024))KB"
            else
              echo "$(($bytes / 1048576))MB"
            fi
          }

          for package in "${packages[@]}"; do
            package_dir="packages/$package"
            if [ -d "$package_dir/dist" ]; then
              echo "## $package" >> bundle-size.txt
              echo "" >> bundle-size.txt
              
              for file in "$package_dir/dist"/*.{js,mjs}; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  original_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
                  gzip_size=$(gzip -c "$file" | wc -c)
                  
                  echo "ðŸ“„ $filename" >> bundle-size.txt
                  echo "  Original: $(format_bytes $original_size)" >> bundle-size.txt
                  echo "  Gzipped:  $(format_bytes $gzip_size)" >> bundle-size.txt
                  echo "" >> bundle-size.txt
                fi
              done
              echo "" >> bundle-size.txt
            fi
          done

          cat bundle-size.txt

      - name: Comment PR with bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSize = fs.readFileSync('bundle-size.txt', 'utf8');

            // Parse bundle size report and format as markdown table
            const lines = bundleSize.split('\n');
            let tableRows = [];
            let currentPackage = '';
            let currentFile = '';
            let originalSize = '';
            let gzippedSize = '';

            for (const line of lines) {
              if (line.startsWith('## ')) {
                currentPackage = line.replace('## ', '');
              } else if (line.startsWith('ðŸ“„ ')) {
                currentFile = line.replace('ðŸ“„ ', '');
              } else if (line.includes('Original:')) {
                originalSize = line.replace('  Original: ', '').trim();
              } else if (line.includes('Gzipped:')) {
                gzippedSize = line.replace('  Gzipped: ', '').trim();
                if (currentPackage && currentFile && originalSize && gzippedSize) {
                  tableRows.push(`| **${currentPackage}** | \`${currentFile}\` | ${originalSize} | ${gzippedSize} |`);
                  currentFile = originalSize = gzippedSize = '';
                }
              }
            }

            const comment = `## ðŸ“¦ SVGFusion Bundle Size Report

            | Package | File | Original | Gzipped |
            |---------|------|----------|---------|
            ${tableRows.join('\n')}

            > ðŸ’¡ This report shows bundle sizes for all SVGFusion packages (excluding demo and docs).
            > Dynamic imports (like prettier) are not included in bundle sizes.

            <sub>Generated for commit [\`${context.sha.substring(0, 7)}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})</sub>`;

            // Find existing comment from this bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('ðŸ“¦ SVGFusion Bundle Size Report')
            );

            if (existingComment) {
              console.log('Updating existing bundle size comment...');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              console.log('Creating new bundle size comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

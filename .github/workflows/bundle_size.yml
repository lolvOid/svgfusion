name: Bundle Size Report

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  bundle-size:
    name: Bundle Size Report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Calculate bundle sizes
        run: |
          echo "ðŸ“¦ Bundle Size Report" > bundle-size.txt
          echo "=====================" >> bundle-size.txt
          echo "" >> bundle-size.txt
          
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              original_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              gzip_size=$(gzip -c "$file" | wc -c)
              
              echo "ðŸ“„ $filename" >> bundle-size.txt
              echo "  Original: $(numfmt --to=iec-i --suffix=B $original_size)" >> bundle-size.txt
              echo "  Gzipped:  $(numfmt --to=iec-i --suffix=B $gzip_size)" >> bundle-size.txt
              echo "" >> bundle-size.txt
            fi
          done
          
          cat bundle-size.txt

      - name: Comment PR with bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSize = fs.readFileSync('bundle-size.txt', 'utf8');
            
            // Parse bundle size report and format as markdown table
            const lines = bundleSize.split('\n');
            let tableRows = [];
            let currentFile = '';
            let originalSize = '';
            let gzippedSize = '';
            
            for (const line of lines) {
              if (line.startsWith('ðŸ“„ ')) {
                currentFile = line.replace('ðŸ“„ ', '');
              } else if (line.includes('Original:')) {
                originalSize = line.replace('  Original: ', '').trim();
              } else if (line.includes('Gzipped:')) {
                gzippedSize = line.replace('  Gzipped: ', '').trim();
                if (currentFile && originalSize && gzippedSize) {
                  tableRows.push(`| \`${currentFile}\` | ${originalSize} | ${gzippedSize} |`);
                  currentFile = originalSize = gzippedSize = '';
                }
              }
            }
            
            const comment = `## ðŸ“¦ Bundle Size Report
            
            | File | Original | Gzipped |
            |------|----------|---------|
            ${tableRows.join('\n')}
            
            > ðŸ’¡ This comment will be automatically updated when new commits are pushed to this PR.
            
            <sub>Generated for commit [\`${context.sha.substring(0, 7)}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})</sub>`;
            
            // Find existing comment from this bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('ðŸ“¦ Bundle Size Report')
            );
            
            if (existingComment) {
              console.log('Updating existing bundle size comment...');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              console.log('Creating new bundle size comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }